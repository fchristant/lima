@layer components {
  /* card wrapper for a single light */
  .light {
    display: flex;
    flex-direction: column;
    border: 2px solid var(--color-neutral-010);
    border-radius: 10px;
    transition: all 0.5s linear;
    width: calc((100% / 2) - (((2 - 1) / 2) * var(--main-padding-mobile)));
    max-width: 30rem;
  }

  @media only screen and (min-width: 668px) {
    .light {
      width: calc((100% / 3) - (((3 - 1) / 3) * var(--main-padding-mobile)));
    }
  }

  @media only screen and (min-width: 960px) {
    .light {
      width: calc((100% / 4) - (((4 - 1) / 4) * var(--main-padding)));
    }
  }

  @media only screen and (min-width: 1024px) {
    .light {
      width: calc((100% / 5) - (((5 - 1) / 5) * var(--main-padding)));
    }
  }

  @media only screen and (min-width: 1440px) {
    .light {
      width: calc((100% / 6) - (((6 - 1) / 6) * var(--main-padding)));
    }
  }

  @media only screen and (min-width: 1720px) {
    .light {
      width: calc((100% / 7) - (((7 - 1) / 7) * var(--main-padding)));
    }
  }

  @media only screen and (min-width: 2100px) {
    .light {
      width: calc((100% / 8) - (((8 - 1) / 8) * var(--main-padding)));
    }
  }

  @media only screen and (min-width: 2100px) {
    .light {
      max-width: 25rem;
    }
  }

  .light-name {
    text-align: center;
    margin-bottom: var(--spacing-m);
    padding: var(--spacing-xxs) var(--spacing-xs);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .light-spot-wrapper {
    display: block;
    margin-bottom: var(--spacing-l);
  }

  /* rendition of the light state */
  .light-spot {
    display: block;
    width: 60px;
    height: 60px;
    position: relative;
    border-radius: 50%;
    margin: 0 auto;
    background-color: currentColor;
    box-shadow: 0 0 30px 16px currentColor;
    transition:
      --a 1s,
      color 0.5s linear;
    background: conic-gradient(currentColor var(--a), rgba(255, 255, 255, 1));
    border: 5px solid currentColor;
  }

  /* animation element for when there is an incoming change */
  .light-highlight {
    animation: halo 1s 0s ease-out;
    position: absolute;
    width: 120%;
    height: 120%;
    left: -10%;
    top: -10%;
    border: 3px solid transparent;
    box-shadow: 0 0 1px 2px rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    opacity: 0;
  }

  .light-toggle-wrapper {
    padding: var(--spacing-xxs) var(--spacing-xs);
    text-align: center;
  }

  .light-bri-wrapper {
    padding: var(--spacing-xxs) 0;
    border-top: 1px solid var(--color-neutral-070);
    border-bottom: 1px solid var(--color-neutral-100);
  }

  .light-edit {
    background: linear-gradient(
      to bottom,
      var(--color-neutral-090),
      var(--color-neutral-100)
    );
    padding: var(--spacing-xxs) var(--spacing-xs);
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
  }

  .light-colorpicker-wrapper {
    padding: var(--spacing-xs) 0;
    text-align: center;
    border-bottom: 1px solid var(--color-neutral-100);
  }

  .light-temperature-wrapper {
    padding: var(--spacing-xxs) 0;
    border-top: 1px solid var(--color-neutral-070);
  }

  .light-saturation-wrapper {
    padding: var(--spacing-xxs) 0;
    border-bottom: 1px solid var(--color-neutral-100);
    border-top: 1px solid var(--color-neutral-070);
  }

  .light-hue-wrapper {
    padding-top: var(--spacing-xxs);
    border-top: 1px solid var(--color-neutral-070);
  }

  @keyframes halo {
    0% {
      opacity: 0;
      transform: scale(0.1);
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform: scale(1.6);
    }
  }

  /* custom property that controls angle of conic gradient
 that communicates brightness of light */
  @property --a {
    syntax: "<angle>";
    inherits: false;
    initial-value: 180deg;
  }
}
